<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
            http://www.springframework.org/schema/mvc
            http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context-3.0.xsd
            http://www.springframework.org/schema/aop
            http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
            http://www.springframework.org/schema/tx
            http://www.springframework.org/schema/tx/spring-tx-3.0.xsd ">

    <!-- 引入redis配置文件 -->
    <import resource="classpath*:/redis-context.xml"/>
    <!-- 扫描service、dao组件 -->
    <context:component-scan base-package="com.wdl.spring"/>
    <!-- 引入jdbc.properites -->
    <context:property-placeholder location="classpath:jdbc.properties"/>

    <!-- 数据源c3p0 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driverClassName}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="maxPoolSize" value="${c3p0.pool.size.max}"/>
        <property name="minPoolSize" value="${c3p0.pool.size.min}"/>
        <property name="initialPoolSize" value="${c3p0.pool.size.ini}"/>
        <property name="acquireIncrement" value="${c3p0.pool.size.increment}"/>
    </bean>

    <!-- sessionFactory 将spring和mybatis整合 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!--mybatis配置文件-->
        <property name="configLocation" value="classpath:spring-mybatis.xml"/>
        <!--需要扫描的sql文件-->
        <property name="mapperLocations" value="classpath*:mapping/**/*.xml"/>
    </bean>
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--Dao包-->
        <property name="basePackage" value="com.wdl.spring.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!--配置事物管理,注意:不同服务类之间的方法调用时事物的传播属性才同时生效,同个服务类内的嵌套方法则以调用者的事物传播属性为准-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!-- 开启事务控制的注解支持,顺序最前 -->
    <tx:annotation-driven transaction-manager="transactionManager" order="0"/>
    <!--声明式事物-->
    <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!--SPRING中PROPAGATION类的事务属性详解
                PROPAGATION_REQUIRED：支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。
                PROPAGATION_SUPPORTS：支持当前事务，如果当前没有事务，就以非事务方式执行。
                PROPAGATION_MANDATORY：支持当前事务，如果当前没有事务，就抛出异常。
                PROPAGATION_REQUIRES_NEW：新建事务，如果当前存在事务，把当前事务挂起。
                PROPAGATION_NOT_SUPPORTED：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。
                PROPAGATION_NEVER：以非事务方式执行，如果当前存在事务，则抛出异常。
                PROPAGATION_NESTED：支持当前事务，如果当前事务存在，则执行一个嵌套事务，如果当前没有事务，就新建一个事务。
            -->
            <tx:method name="add*" propagation="REQUIRED"/>
            <tx:method name="append*" propagation="REQUIRED"/>
            <tx:method name="insert*" propagation="REQUIRED"/>
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="modify*" propagation="REQUIRED"/>
            <tx:method name="edit*" propagation="REQUIRED"/>
            <tx:method name="delete*" propagation="REQUIRED"/>
            <tx:method name="remove*" propagation="REQUIRED"/>
            <tx:method name="repair" propagation="REQUIRED"/>
            <tx:method name="delAndRepair" propagation="REQUIRED"/>

            <tx:method name="get*" propagation="SUPPORTS" isolation="DEFAULT" timeout="-1" read-only="true"/>
            <tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="load*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="search*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="datagrid*" propagation="SUPPORTS" read-only="true"/>

            <tx:method name="*" propagation="SUPPORTS"/>
        </tx:attributes>
    </tx:advice>
    <!--配置事物切入点-->
    <aop:config>
        <aop:pointcut id="transactionPointcut" expression="execution(* com.wdl.spring.service..*Impl.*(..))"/>
        <!--声明式事物顺序靠后-->
        <aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice" order="2"/>
    </aop:config>
</beans>